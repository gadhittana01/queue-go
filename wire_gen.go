// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gadhittana-01/queue-go/app"
	"github.com/gadhittana-01/queue-go/db/repository"
	"github.com/gadhittana-01/queue-go/handler"
	"github.com/gadhittana-01/queue-go/service"
	"github.com/gadhittana-01/queue-go/utils"
	"github.com/go-chi/chi"
	"github.com/google/wire"
)

// Injectors from injector.go:

func InitializeApp(route *chi.Mux, DB utils.PGXPool, config *utils.BaseConfig) (app.App, error) {
	repository := querier.NewRepository(DB)
	tokenClient := utils.NewToken(config)
	userSvc := service.NewUserSvc(repository, config, tokenClient)
	userHandler := handler.NewUserHandler(userSvc)
	queueSvc := service.NewQueueSvc(repository, config)
	authMiddleware := utils.NewAuthMiddleware(config, tokenClient)
	queueHandler := handler.NewQueueHandler(queueSvc, authMiddleware)
	appApp := app.NewApp(route, config, userHandler, queueHandler)
	return appApp, nil
}

// injector.go:

var userHandlerSet = wire.NewSet(querier.NewRepository, utils.NewToken, handler.NewUserHandler, service.NewUserSvc)

var queueHandlerSet = wire.NewSet(handler.NewQueueHandler, service.NewQueueSvc)

var authMiddlewareSet = wire.NewSet(utils.NewAuthMiddleware)
